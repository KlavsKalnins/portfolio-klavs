@page "/"
@rendermode InteractiveServer
@using klavsDomain.Services
@inject IOpenAIService OpenAIService
@* @attribute [StreamRendering(true)] *@
@* @attribute [RenderModeServer] *@

<PageTitle>Home</PageTitle>

@* <h1>K</h1> *@

<p>Lets get to know each other. I'm a fragment of "Klāvs Kalniņš", but your can call me Klaus.</p>

<div class="chat-container">
    <div class="input-group mb-3">
        <input type="text" class="form-control" @bind="userQuestion" placeholder="Get to know me btn-primary asking questions.." />
        <button class="btn btn-primary" @onclick="AskQuestion">Ask</button>
    </div>

    @if (!string.IsNullOrEmpty(response))
    {
        <div class="response-box mt-3">
            <p>@response</p>
        </div>
    }
</div>

@code {
    private string userQuestion = "";
    private string response = "...";

    private async Task AskQuestion()
    {
        Console.WriteLine("User question: " + userQuestion);
        try
        {
            if (string.IsNullOrEmpty(userQuestion))
            {
                response = "Please enter a question";
                return;
            }

            response = "Thinking...";

            // Call OpenAI service and await the response
            var result = await OpenAIService.GetOpenAIResponse(userQuestion);
            response = result ?? "Sorry, I couldn't process that request";
        }
        catch (Exception ex)
        {
            response = $"Error: {ex.Message}";
        }
    }
}

<style>
    .chat-container {
        max-width: 800px;
        margin: 20px auto;
    }

    .response-box {
        padding: 15px;
        border-radius: 5px;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
    }
</style>